from aiogram import Router, F
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import SessionLocal
from database.models import User, Product, Category, Message as DBMessage
from openai_api import get_gpt_response
import logging
import re
from database.service import get_or_create_user, save_message, get_random_products_for_category
from sqlalchemy.orm import Session

# Define the keys for preferences
PREFERENCE_KEYS = ["category", "brand", "budget", "color", "characteristics"]

router = Router()

class OrderStates(StatesGroup):
    waiting_for_choice = State()
    product_card = State()

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–µ—Ö–Ω–æ–ú–∞—Ä–∫–µ—Ç! üõí\n\n"
        "–Ø ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ ü§ñ. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ—Ö–Ω–∏–∫–∏, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞!\n\n"
        "–í –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –µ—Å—Ç—å —Ç–∞–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
        "‚Ä¢ –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã\n‚Ä¢ –ü–ª–∞–Ω—à–µ—Ç—ã\n‚Ä¢ –ù–æ—É—Ç–±—É–∫–∏\n‚Ä¢ –¢–µ–ª–µ–≤–∏–∑–æ—Ä—ã\n‚Ä¢ –ù–∞—É—à–Ω–∏–∫–∏\n‚Ä¢ –°–º–∞—Ä—Ç-—á–∞—Å—ã\n‚Ä¢ –§–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç—ã\n‚Ä¢ –ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏\n‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—ã\n‚Ä¢ –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã\n\n"
        "–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –ü–∏—à–∏—Ç–µ –ø—Ä—è–º–æ —Å—é–¥–∞! üòä\n\n"
        "üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–§ | üí≥ –û–ø–ª–∞—Ç–∞ –æ–Ω–ª–∞–π–Ω/–Ω–∞–ª–∏—á–Ω—ã–º–∏ | üõ° –ì–∞—Ä–∞–Ω—Ç–∏—è 1 –≥–æ–¥\n\n"
        "–°–∞–π—Ç: https://technomarket.ru\n\n"
        "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –±–æ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π, —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞—Å—Ç–æ—è—â–∏–µ, –∑–∞–∫–∞–∑—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è."
    )

@router.message(F.text)
async def handle_message(message: Message, state: FSMContext):
    session = SessionLocal()
    try:
        telegram_id = str(message.from_user.id)
        username = message.from_user.username or ""
        user = get_or_create_user(session, telegram_id, username=username)
        if not user or not hasattr(user, "id"):
            await message.answer("–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        save_message(session, user.id, "user", message.text or "")
        data = await state.get_data()
        preferences = data.get("preferences", {})
        history = data.get("history", [])
        product_list_ids = data.get("product_list", [])
        selected_product_id = data.get("selected_product_id")
        dialog = history[-3:] + [message.text or ""]
        llm_input = "\n".join(dialog)
        from context import context_manager
        context = context_manager.get_context()
        llm_response = await get_gpt_response(llm_input, context)
        extracted = {}
        import re
        match = re.search(r"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:([^\n]*)", llm_response)
        if match:
            params = match.group(1)
            for key in PREFERENCE_KEYS:
                m = re.search(fr"{key}\s*=\s*([^,]*)", params)
                if m:
                    extracted[key] = m.group(1).strip()
        preferences.update({k: v for k, v in extracted.items() if v})
        history.append(message.text or "")
        await state.update_data(preferences=preferences, history=history)
        missing = [k for k in ["category", "budget", "brand", "color", "characteristics"] if not preferences.get(k)]
        if missing:
            questions = {
                "category": "–∫–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–µ—Ö–Ω–∏–∫–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                "budget": "–∫–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç?",
                "brand": "–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –±—Ä–µ–Ω–¥?",
                "color": "–∫–∞–∫–æ–π —Ü–≤–µ—Ç –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?",
                "characteristics": "–µ—Å—Ç—å –ª–∏ –≤–∞–∂–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞, –∫–∞–º–µ—Ä–∞)?"
            }
            ask = " ".join([questions[m] for m in missing])
            await message.answer(f"–°–ø–∞—Å–∏–±–æ! –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: {ask}")
            return
        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é ---
        if product_list_ids and message.text:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ FSM
            products = session.query(Product).filter(Product.id.in_(product_list_ids)).all()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            chosen_product = None
            # 1. –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É
            if message.text and message.text.strip().isdigit():
                idx = int(message.text.strip()) - 1
                if 0 <= idx < len(products):
                    chosen_product = products[idx]
            # 2. –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–ø—Ä–æ—Å—Ç–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ)
            if not chosen_product and message.text:
                for p in products:
                    pname = str(p.name) if p.name else ""
                    if pname.lower() in message.text.lower():
                        chosen_product = p
                        break
            if chosen_product:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ FSM
                await state.update_data(selected_product_id=getattr(chosen_product, 'id', None))
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞
                pname = str(getattr(chosen_product, 'name', ''))
                pdesc = str(getattr(chosen_product, 'description', ''))
                pprice = str(getattr(chosen_product, 'price', ''))
                text = f"<b>{pname}</b>\n\n{pdesc}\n\n–¶–µ–Ω–∞: {pprice} ‚ÇΩ"
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
                image_url = getattr(chosen_product, 'image_url', None)
                image_url = str(image_url) if image_url and not isinstance(image_url, type(Product.image_url)) else None
                if image_url and image_url.strip():
                    try:
                        await message.answer_photo(image_url, caption=text, parse_mode="HTML")
                    except Exception:
                        await message.answer(text, parse_mode="HTML")
                else:
                    await message.answer(text, parse_mode="HTML")
                await message.answer("–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ '–ø–æ–¥—Ä–æ–±–Ω–µ–µ' –∏–ª–∏ '–∑–∞–∫–∞–∑–∞—Ç—å'. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–∞–∑–∞–¥'.")
                return
        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ ---
        if selected_product_id:
            selected_product = session.query(Product).filter(Product.id == selected_product_id).first()
            if selected_product:
                user_text = (message.text or '').strip().lower()
                if '–ø–æ–¥—Ä–æ–±–Ω–µ–µ' in user_text:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    pname = str(getattr(selected_product, 'name', ''))
                    pdesc = str(getattr(selected_product, 'description', ''))
                    pprice = str(getattr(selected_product, 'price', ''))
                    specs = getattr(selected_product, 'specs', {})
                    specs_str = ''
                    if specs and isinstance(specs, dict):
                        specs_str = '\n'.join([f"{k}: {v}" for k, v in specs.items()])
                    text = f"<b>{pname}</b>\n\n{pdesc}\n\n{specs_str}\n\n–¶–µ–Ω–∞: {pprice} ‚ÇΩ"
                    await message.answer(text, parse_mode="HTML")
                    await message.answer("–ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ '–∑–∞–∫–∞–∑–∞—Ç—å'. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–∞–∑–∞–¥'.")
                    return
                elif '–∑–∞–∫–∞–∑–∞—Ç—å' in user_text:
                    pname = str(getattr(selected_product, 'name', ''))
                    await message.answer(f"–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ '{pname}' –æ—Ñ–æ—Ä–º–ª–µ–Ω! (–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º, –∑–∞–∫–∞–∑ –Ω–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω)\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –¢–µ—Ö–Ω–æ–ú–∞—Ä–∫–µ—Ç! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–∞–∑–∞–¥' –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.")
                    # –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä, –æ—Å—Ç–∞–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏ —Ñ–∏–ª—å—Ç—Ä—ã
                    await state.update_data(selected_product_id=None)
                    return
                elif '–Ω–∞–∑–∞–¥' in user_text:
                    # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤
                    product_list_ids = data.get("product_list", [])
                    if product_list_ids:
                        products = session.query(Product).filter(Product.id.in_(product_list_ids)).all()
                        response = ["–í–æ—Ç —á—Ç–æ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:"]
                        for idx, p in enumerate(products, 1):
                            response.append(f"{idx}. {p.name}\n{p.description[:60]}...\n–¶–µ–Ω–∞: {p.price} ‚ÇΩ")
                        response.append("\n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ñ–æ—Ç–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏.")
                        await message.answer("\n\n".join(response))
                        await state.update_data(selected_product_id=None)
                        return
                    else:
                        await message.answer("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
                        await state.update_data(selected_product_id=None)
                        return
        # --- –ù–æ–≤—ã–π –±–ª–æ–∫: –ø–æ–¥–±–æ—Ä –∏ –ø–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤ ---
        products_query = session.query(Product)
        if preferences.get("category"):
            category = session.query(Category).filter(Category.name.ilike(f"%{preferences['category']}%")) .first()
            if category:
                products_query = products_query.filter(Product.category_id == category.id)
        if preferences.get("brand"):
            products_query = products_query.filter(Product.name.ilike(f"%{preferences['brand']}%"))
        if preferences.get("budget"):
            try:
                price = int(re.sub(r"[^0-9]", "", preferences["budget"]))
                products_query = products_query.filter(Product.price <= price)
            except Exception:
                pass
        if preferences.get("color"):
            color = preferences["color"].lower()
            products_query = products_query.filter(Product.description.ilike(f"%{color}%"))
        if preferences.get("characteristics"):
            char = preferences["characteristics"].lower()
            products_query = products_query.filter(Product.description.ilike(f"%{char}%"))
        products = products_query.limit(5).all()
        if not products:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–≤–µ–ª–∏—á–∏—Ç—å –±—é–¥–∂–µ—Ç, –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –±—Ä–µ–Ω–¥ –∏–ª–∏ —Ü–≤–µ—Ç). –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–æ ‚Äî –∏ —è –ø–æ–¥–±–µ—Ä—É —á—Ç–æ-—Ç–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ!")
            return
        response = ["–í–æ—Ç —á—Ç–æ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:"]
        for idx, p in enumerate(products, 1):
            response.append(f"{idx}. {p.name}\n{p.description[:60]}...\n–¶–µ–Ω–∞: {p.price} ‚ÇΩ")
        response.append("\n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ñ–æ—Ç–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏.")
        await message.answer("\n\n".join(response))
        await state.update_data(product_list=[p.id for p in products])
    except Exception as e:
        logging.error(f"[handle_message] –û—à–∏–±–∫–∞: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    finally:
        session.close() 