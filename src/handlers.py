from aiogram import Router, F
from aiogram.types import Message, InputFile, FSInputFile
from aiogram.filters import Command
from context import context_manager
from openai_api import get_gpt_response, get_category_by_llm
from database import SessionLocal
from database.service import (
    get_or_create_user, save_message, get_user_history, get_random_products_by_category, get_random_products_for_category
)
from context import format_products_for_context
from database.models import Category, Product, User
import re
from pathlib import Path
from sqlalchemy import func
from sqlalchemy import or_
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.fsm.state import State, StatesGroup
import json
import logging
import hashlib

router = Router()

class OrderStates(StatesGroup):
    waiting_for_choice = State()
    waiting_for_contact = State()
    product_card = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞

BRAND_GROUPS = {
    "–∫–∏—Ç–∞–π—Å–∫–∏–µ": ["Xiaomi", "Realme", "Honor", "Huawei", "OnePlus", "Lenovo", "Meizu", "ZTE", "Vivo", "Oppo", "TCL", "Hisense"],
    "–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ": ["Apple", "Google", "Microsoft", "Dell", "HP", "Sennheiser", "JBL", "Razer", "Kingston", "Baseus"],
    "–∫–æ—Ä–µ–π—Å–∫–∏–µ": ["Samsung", "LG"],
    "—è–ø–æ–Ω—Å–∫–∏–µ": ["Sony", "Panasonic", "Fujifilm", "Canon", "Nikon", "AOC"],
    "–Ω–µ–º–µ—Ü–∫–∏–µ": ["Sennheiser"],
    "—Ç–∞–π–≤–∞–Ω—å—Å–∫–∏–µ": ["ASUS", "Acer", "MSI", "BenQ"],
    "—à–≤–µ–π—Ü–∞—Ä—Å–∫–∏–µ": ["Logitech"],
    "–≥–æ–ª–ª–∞–Ω–¥—Å–∫–∏–µ": ["Philips"],
    "–∫–∞–ª–∏—Ñ–æ—Ä–Ω–∏–π—Å–∫–∏–µ": ["Apple", "Google"],
}
SIZE_RANGES = {
    "—Ç–µ–ª–µ–≤–∏–∑–æ—Ä—ã": {
        "–º–∞–ª–µ–Ω—å–∫–∏–π": ["43"],
        "—Å—Ä–µ–¥–Ω–∏–π": ["50", "55"],
        "–±–æ–ª—å—à–æ–π": ["65", "75", "85"]
    },
    "–Ω–æ—É—Ç–±—É–∫–∏": {
        "–º–∞–ª–µ–Ω—å–∫–∏–π": ["13"],
        "—Å—Ä–µ–¥–Ω–∏–π": ["14", "15.6"],
        "–±–æ–ª—å—à–æ–π": ["16", "17"]
    },
    "–º–æ–Ω–∏—Ç–æ—Ä—ã": {
        "–º–∞–ª–µ–Ω—å–∫–∏–π": ["24"],
        "—Å—Ä–µ–¥–Ω–∏–π": ["27", "29"],
        "–±–æ–ª—å—à–æ–π": ["32", "34", "49"]
    }
}
IGNORE_WORDS = ["–Ω–µ –≤–∞–∂–Ω–æ", "–ª—é–±–æ–π", "–±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã", "–Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è", "any", "doesn't matter", "–ø–æ—Å–æ–≤–µ—Ç—É–π", "–ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π", "–≤—ã–±–µ—Ä–∏"]

def get_category_by_keywords(user_message: str) -> list[str]:
    mapping = {
        "—Ç–µ–ª–µ—Ñ–æ–Ω": "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã",
        "—Å–º–∞—Ä—Ç—Ñ–æ–Ω": "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã",
        "–º–æ–±–∏–ª—å–Ω–∏–∫": "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã",
        "–∞–π—Ñ–æ–Ω": "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã",
        "iphone": "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã",
        "–ø–ª–∞–Ω—à–µ—Ç": "–ü–ª–∞–Ω—à–µ—Ç—ã",
        "–Ω–æ—É—Ç–±—É–∫": "–ù–æ—É—Ç–±—É–∫–∏",
        "–º–∞–∫–±—É–∫": "–ù–æ—É—Ç–±—É–∫–∏",
        "—Ç–µ–ª–µ–≤–∏–∑–æ—Ä": "–¢–µ–ª–µ–≤–∏–∑–æ—Ä—ã",
        "–Ω–∞—É—à–Ω–∏–∫–∏": "–ù–∞—É—à–Ω–∏–∫–∏",
        "—á–∞—Å—ã": "–°–º–∞—Ä—Ç-—á–∞—Å—ã",
        "apple watch": "–°–º–∞—Ä—Ç-—á–∞—Å—ã",
        "–∫–∞–º–µ—Ä–∞": "–§–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç—ã",
        "—Ñ–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç": "–§–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç—ã",
        "–ø—Ä–∏—Å—Ç–∞–≤–∫–∞": "–ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏",
        "playstation": "–ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏",
        "xbox": "–ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏",
        "–º–æ–Ω–∏—Ç–æ—Ä": "–ú–æ–Ω–∏—Ç–æ—Ä—ã",
        "–∞–∫—Å–µ—Å—Å—É–∞—Ä": "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã",
        "–º—ã—à—å": "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã",
        "–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞": "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã",
        "powerbank": "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã",
    }
    text = user_message.lower()
    found = set()
    for key, cat in mapping.items():
        if key in text:
            found.add(cat)
    return list(found)

def to_plain_dict(obj):
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫ –ø—Ä–æ—Å—Ç—ã–º —Ç–∏–ø–∞–º
    if isinstance(obj, dict):
        return {str(k): to_plain_dict(v) for k, v in obj.items()}
    elif isinstance(obj, list):
        return [to_plain_dict(v) for v in obj]
    elif isinstance(obj, (str, int, float, bool)) or obj is None:
        return obj
    else:
        return str(obj)

def get_products_id(products):
    return hashlib.md5(json.dumps(products, sort_keys=True, ensure_ascii=False).encode()).hexdigest()

@router.message(Command("start"))
async def cmd_start(message: Message):
    session = SessionLocal()
    categories = session.query(Category).all()
    session.close()
    cat_list = "\n".join([f"‚Ä¢ {cat.name}" for cat in categories])
    # –ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è –¢–µ—Ö–Ω–æ–ú–∞—Ä–∫–µ—Ç (–ø—Ä–∏–º–µ—Ä Unsplash)
    image_url = "images/hello_image.png"
    photo = FSInputFile(image_url)
    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–µ—Ö–Ω–æ–ú–∞—Ä–∫–µ—Ç! üõí\n\n"
        "–Ø ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ ü§ñ. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ—Ö–Ω–∏–∫–∏, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞!\n\n"
        "–í –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –µ—Å—Ç—å —Ç–∞–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
        f"{cat_list}\n\n"
        "–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –ü–∏—à–∏—Ç–µ –ø—Ä—è–º–æ —Å—é–¥–∞! üòä\n\n"
        "üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–§ | üí≥ –û–ø–ª–∞—Ç–∞ –æ–Ω–ª–∞–π–Ω/–Ω–∞–ª–∏—á–Ω—ã–º–∏ | üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç–∏—è 1 –≥–æ–¥\n"
        "\n–°–∞–π—Ç: https://technomarket.ru\n\n"
        "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –±–æ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π, —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞—Å—Ç–æ—è—â–∏–µ, –∑–∞–∫–∞–∑—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è."
    )
    await message.answer_photo(photo, caption=text)

@router.message(Command("setcontext"))
async def cmd_setcontext(message: Message):
    if message.text and len(message.text.split(maxsplit=1)) > 1:
        new_context = message.text.split(maxsplit=1)[1]
        context_manager.save_context(new_context)
        await message.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É —É—á–∏—Ç—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç –¢–µ—Ö–Ω–æ–ú–∞—Ä–∫–µ—Ç.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /setcontext –í—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–µ.")

@router.message(Command("resetcontext"))
async def cmd_resetcontext(message: Message):
    context_manager.reset_context()
    await message.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –¥–ª—è –¢–µ—Ö–Ω–æ–ú–∞—Ä–∫–µ—Ç. –Ø —Å–Ω–æ–≤–∞ –≥–æ—Ç–æ–≤ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∏ —É—Å–ª—É–≥–∞–º –∫–æ–º–ø–∞–Ω–∏–∏!")

@router.message(F.text)
async def handle_message(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    current_state = await state.get_state()
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ ‚Äî –Ω–µ –¥–µ–ª–∞–µ–º –ø–æ–¥–±–æ—Ä –∑–∞–Ω–æ–≤–æ
    if current_state in [OrderStates.waiting_for_choice.state, OrderStates.product_card.state]:
        return  # –ü—É—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–µ–ª–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π handler
    user_message = message.text or ""
    session = SessionLocal()
    tg_user = message.from_user
    if tg_user is None:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.")
        return
    user = get_or_create_user(
        session,
        telegram_id=str(tg_user.id),
        username=tg_user.username,
        first_name=tg_user.first_name,
        last_name=tg_user.last_name
    )
    session.refresh(user)
    user_id = user.id if isinstance(user.id, int) else user.id.value
    save_message(session, user_id, "user", user_message)
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è LLM
    history_limit = 5
    history = get_user_history(session, user_id, limit=history_limit)
    history_text = "\n".join([
        f"{m.role}: {m.message}" for m in history
    ])
    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    extra = user.extra_data if isinstance(user.extra_data, dict) else {}
    if not isinstance(extra, dict):
        extra = {}
    saved_params = extra.get("search_params", {})
    context = f"{context_manager.get_context()}\n\n–ò—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è:\n{history_text}"
    reply = await get_gpt_response(user_message, context)
    save_message(session, user_id, "assistant", reply)
    # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM
    search_params = None
    for line in reply.splitlines():
        if line.strip().lower().startswith("–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:"):
            search_params = line.strip()[len("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:"):].strip()
            break
    # --- –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º–∏ ---
    params = dict(saved_params) if saved_params else {}
    if search_params:
        for part in search_params.split(","):
            if "=" in part:
                k, v = part.split("=", 1)
                k = k.strip().lower()
                v = v.strip().lower()
                if v and v not in IGNORE_WORDS:
                    params[k] = v
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    extra["search_params"] = params
    user.extra_data = to_plain_dict(extra)  # type: ignore
    session.commit()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    KEY_PARAMS = ["—Ü–µ–Ω–∞", "–±—é–¥–∂–µ—Ç", "–±—Ä–µ–Ω–¥", "—Ü–≤–µ—Ç", "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", "—Ä–∞–∑–º–µ—Ä", "–º–æ–¥–µ–ª—å", "–æ–±—ä—ë–º", "–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å", "—ç–∫—Ä–∞–Ω", "—Ç–∏–ø"]
    has_characteristics = any(
        k in params and params[k] and params[k] not in IGNORE_WORDS
        for k in KEY_PARAMS
    )
    if not has_characteristics:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        cleaned_reply = "\n".join(
            line for line in reply.splitlines()
            if not (line.strip().lower().startswith("–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:") or 
                   line.strip().lower().startswith("–∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:"))
        ).strip()
        if cleaned_reply:
            await message.answer(cleaned_reply)
        session.close()
        return
    # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ
    query = session.query(Product)
    category_obj = None
    # Fallback: –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî –∏—â–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ –≤ extra_data
    if ("–∫–∞—Ç–µ–≥–æ—Ä–∏—è" not in params or not params["–∫–∞—Ç–µ–≥–æ—Ä–∏—è"] or any(w in params["–∫–∞—Ç–µ–≥–æ—Ä–∏—è"] for w in IGNORE_WORDS)):
        last_category = extra.get("last_category")
        if last_category:
            params["–∫–∞—Ç–µ–≥–æ—Ä–∏—è"] = last_category
            logging.warning(f"[–¢–µ—Ö–Ω–æ–ú–∞—Ä–∫–µ—Ç] LLM –Ω–µ —É–∫–∞–∑–∞–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º last_category –∏–∑ extra_data: {last_category}")
        else:
            cat_from_history = get_category_by_keywords(history_text)
            if cat_from_history:
                params["–∫–∞—Ç–µ–≥–æ—Ä–∏—è"] = cat_from_history[0]
                extra["last_category"] = cat_from_history[0]
                logging.warning(f"[–¢–µ—Ö–Ω–æ–ú–∞—Ä–∫–µ—Ç] LLM –Ω–µ —É–∫–∞–∑–∞–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏: {cat_from_history[0]}")
            else:
                logging.error("[–¢–µ—Ö–Ω–æ–ú–∞—Ä–∫–µ—Ç] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞, –Ω–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏!")
        user.extra_data = to_plain_dict(extra)  # type: ignore
        session.commit()
    if "–∫–∞—Ç–µ–≥–æ—Ä–∏—è" in params and not any(w in params["–∫–∞—Ç–µ–≥–æ—Ä–∏—è"] for w in IGNORE_WORDS):
        cat = session.query(Category).filter(Category.name.ilike(f"%{params['–∫–∞—Ç–µ–≥–æ—Ä–∏—è']}%"))
        category_obj = cat.first()
        if category_obj:
            query = query.filter(Product.category_id == category_obj.id)
            extra["last_category"] = category_obj.name
            user.extra_data = to_plain_dict(extra)  # type: ignore
            session.commit()
    # --- –°–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤ ---
    filters = {'color': [], 'brand': [], 'spec': [], 'price': []}
    if "—Ü–≤–µ—Ç" in params and not any(w in params["—Ü–≤–µ—Ç"] for w in IGNORE_WORDS):
        colors = [c.strip() for c in re.split(r"[,/]| –∏–ª–∏ | or ", params["—Ü–≤–µ—Ç"]) if c.strip()]
        if colors:
            filters['color'] = [or_(Product.name.ilike(f"%{color}%"), Product.description.ilike(f"%{color}%")) for color in colors]
    if "–±—Ä–µ–Ω–¥" in params and not any(w in params["–±—Ä–µ–Ω–¥"] for w in IGNORE_WORDS):
        brands = []
        for group, group_brands in BRAND_GROUPS.items():
            if group in params["–±—Ä–µ–Ω–¥"]:
                brands.extend(group_brands)
        for b in re.split(r"[,/]| –∏–ª–∏ | or ", params["–±—Ä–µ–Ω–¥"]):
            b = b.strip()
            if b and b not in brands:
                brands.append(b.capitalize())
        if brands:
            filters['brand'] = [Product.name.ilike(f"%{b}%") for b in brands]
    if "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏" in params and not any(w in params["—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"] for w in IGNORE_WORDS):
        size_words = ["–º–∞–ª–µ–Ω—å–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "–±–æ–ª—å—à–æ–π"]
        for size_word in size_words:
            if size_word in params["—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"]:
                cat_name = params.get("–∫–∞—Ç–µ–≥–æ—Ä–∏—è", "")
                for key, ranges in SIZE_RANGES.items():
                    if key in cat_name.lower():
                        for sz in ranges[size_word]:
                            filters['spec'].append(Product.name.ilike(f"%{sz}%"))
                break
        else:
            filters['spec'].append(Product.description.ilike(f"%{params['—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏']}%"))
    # --- –ù–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É (–ø—Ä–æ–≤–æ–¥–Ω—ã–µ/–±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ) ---
    if "—Ç–∏–ø" in params and not any(w in params["—Ç–∏–ø"] for w in IGNORE_WORDS):
        filters['spec'].append(Product.name.ilike(f"%{params['—Ç–∏–ø']}%"))
        filters['spec'].append(Product.description.ilike(f"%{params['—Ç–∏–ø']}%"))
    if "—Ü–µ–Ω–∞" in params and not any(w in params["—Ü–µ–Ω–∞"] for w in IGNORE_WORDS):
        try:
            price = int(re.sub(r"\D", "", params["—Ü–µ–Ω–∞"]))
            filters['price'] = [Product.price <= price]
        except Exception:
            pass
    # --- –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ—ç—Ç–∞–ø–Ω—ã–º –æ—Å–ª–∞–±–ª–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤ ---
    def smart_product_search(query, filters, session, category_obj):
        q = query
        if filters['color']:
            q = q.filter(or_(*filters['color']))
        if filters['brand']:
            q = q.filter(or_(*filters['brand']))
        if filters['spec']:
            q = q.filter(*filters['spec'])
        if filters['price']:
            q = q.filter(*filters['price'])
        products = q.order_by(func.random()).limit(3).all()
        if products:
            return products, []
        q = query
        if filters['brand']:
            q = q.filter(or_(*filters['brand']))
        if filters['spec']:
            q = q.filter(*filters['spec'])
        if filters['price']:
            q = q.filter(*filters['price'])
        products = q.order_by(func.random()).limit(3).all()
        if products:
            return products, ['—Ü–≤–µ—Ç']
        q = query
        if filters['spec']:
            q = q.filter(*filters['spec'])
        if filters['price']:
            q = q.filter(*filters['price'])
        products = q.order_by(func.random()).limit(3).all()
        if products:
            return products, ['—Ü–≤–µ—Ç', '–±—Ä–µ–Ω–¥']
        q = query
        if filters['price']:
            q = q.filter(*filters['price'])
        products = q.order_by(func.random()).limit(3).all()
        if products:
            return products, ['—Ü–≤–µ—Ç', '–±—Ä–µ–Ω–¥', '—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏']
        if filters['price']:
            q = session.query(Product).filter(Product.category_id == category_obj.id).filter(*filters['price'])
        else:
            q = session.query(Product).filter(Product.category_id == category_obj.id)
        products = q.order_by(func.random()).limit(3).all()
        if products:
            return products, ['—Ü–≤–µ—Ç', '–±—Ä–µ–Ω–¥', '—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏', '–∫–∞—Ç–µ–≥–æ—Ä–∏—è']
        products = session.query(Product).filter(Product.category_id == category_obj.id).order_by(func.random()).limit(3).all()
        return products, ['–≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã']
    products, dropped = smart_product_search(query, filters, session, category_obj)
    main_text = reply.split("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:")[0].strip()
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ main_text
    main_text = "\n".join(
        line for line in main_text.splitlines()
        if not (line.strip().lower().startswith("–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:") or 
               line.strip().lower().startswith("–∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:"))
    ).strip()
    if dropped:
        msg = "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –≤–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–∞–º –ø–æ–¥–æ–π—Ç–∏:"
        if dropped != ['–≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã']:
            msg += " (–æ—Å–ª–∞–±–ª–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã: " + ", ".join(dropped) + ")"
        await message.answer(msg)
        main_text = ""
    if products:
        text_lines = [main_text] if main_text else []
        for idx, prod in enumerate(products, 1):
            text_lines.append(f"{idx}. {prod.name} ‚Äî {prod.price}‚ÇΩ\n{prod.description}")
        category_name = category_obj.name if category_obj and hasattr(category_obj, 'name') else "—Ç–æ–≤–∞—Ä"
        text_lines.append(f"\n–ï—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ {category_name.lower()} –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ —É–≤–∏–¥–µ—Ç—å —Ñ–æ—Ç–æ.")
        await message.answer("\n\n".join(text_lines))
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
        last_products = []
        for p in products:
            price_val = getattr(p, 'price', 0)
            try:
                price_val = int(price_val)
            except Exception:
                price_val = 0
            last_products.append({
                "name": str(getattr(p, 'name', '')),
                "image_url": str(getattr(p, 'image_url', '')),
                "desc": str(getattr(p, 'description', '')),
                "price": price_val
            })
        extra["last_products"] = last_products
        extra["current_product_list_id"] = get_products_id(last_products)
        user.extra_data = to_plain_dict(extra)  # type: ignore
        session.commit()
        await state.set_state(OrderStates.waiting_for_choice)
    session.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
@router.message(F.text.regexp(r"(?i)—Ñ–æ—Ç–æ|–∫–∞—Ä—Ç–∏–Ω–∫–∞|photo|picture|–ø–æ–∫–∞–∂–∏|show"))
async def handle_any_photo_request(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏: –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –ø–æ image_url"""
    user_message = message.text or ""
    session = SessionLocal()
    tg_user = message.from_user
    if tg_user is None:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.")
        return
    user = get_or_create_user(
        session,
        telegram_id=str(tg_user.id),
        username=tg_user.username,
        first_name=tg_user.first_name,
        last_name=tg_user.last_name
    )
    session.refresh(user)
    extra = user.extra_data if isinstance(user.extra_data, dict) else {}
    if not isinstance(extra, dict):
        extra = {}
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º current_product (–≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä)
    chosen = extra.get("current_product")
    # –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –∏–∑ last_products
    if not chosen:
        last_products = extra.get("last_products", [])
        if last_products:
            chosen = last_products[0]
    if chosen and "image_url" in chosen:
        await message.answer_photo(chosen["image_url"], caption=chosen.get("name", "–§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞"))
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –¥–ª—è –∫–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–¥–∞—á–∏.")
    session.close()

@router.message(StateFilter(OrderStates.waiting_for_choice), F.text)
async def handle_product_choice(message: Message, state: FSMContext):
    user_message = message.text or ""
    session = SessionLocal()
    tg_user = message.from_user
    if tg_user is None:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.")
        return
    user = get_or_create_user(
        session,
        telegram_id=str(tg_user.id),
        username=tg_user.username,
        first_name=tg_user.first_name,
        last_name=tg_user.last_name
    )
    session.refresh(user)
    extra = user.extra_data if isinstance(user.extra_data, dict) else {}
    if not isinstance(extra, dict):
        extra = {}
    last_products = extra.get("last_products", [])
    last_products_id = get_products_id(last_products) if last_products else None
    current_products_id = extra.get("current_product_list_id")
    choice = user_message.lower()
    chosen = None
    # –ü–æ –Ω–æ–º–µ—Ä—É
    for idx, prod in enumerate(last_products, 1):
        if str(idx) == choice.strip():
            chosen = prod
            break
    # –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
    if not chosen:
        for prod in last_products:
            if prod["name"].lower() in choice or choice in prod["name"].lower():
                chosen = prod
                break
    if chosen:
        from aiogram.types import FSInputFile
        from pathlib import Path
        file_path = Path.cwd() / chosen["image_url"]
        if file_path.exists():
            photo = FSInputFile(str(file_path))
            caption = f"{chosen['name']} ‚Äî {chosen['price']}‚ÇΩ\n{chosen['desc']}"
            await message.answer_photo(photo, caption=caption + "\n\n–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä? –ù–∞–ø–∏—à–∏—Ç–µ '–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑' –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.")
        else:
            await message.answer(f"{chosen['name']}\n–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n{chosen['desc']}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
        extra["current_product"] = chosen
        extra["current_product_list_id"] = last_products_id
        user.extra_data = to_plain_dict(extra)  # type: ignore
        session.commit()
        await state.set_state(OrderStates.product_card)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤—ã –≤—ã–±—Ä–∞–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–¥–∞—á–∏.")
    session.close()

@router.message(StateFilter(OrderStates.product_card), F.text)
async def handle_product_card(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ - –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ"""
    user_message = message.text or ""
    session = SessionLocal()
    tg_user = message.from_user
    if tg_user is None:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.")
        return
    user = get_or_create_user(
        session,
        telegram_id=str(tg_user.id),
        username=tg_user.username,
        first_name=tg_user.first_name,
        last_name=tg_user.last_name
    )
    session.refresh(user)
    extra = user.extra_data if isinstance(user.extra_data, dict) else {}
    if not isinstance(extra, dict):
        extra = {}
    current_product = extra.get("current_product")
    
    if not current_product:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        session.close()
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞
    user_message_lower = user_message.lower()
    
    # –ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ
    if any(word in user_message_lower for word in ["—Ñ–æ—Ç–æ", "–∫–∞—Ä—Ç–∏–Ω–∫–∞", "photo", "picture", "–ø–æ–∫–∞–∂–∏", "show"]):
        if current_product["image_url"].startswith("images/"):
            from aiogram.types import FSInputFile
            from pathlib import Path
            file_path = Path.cwd() / current_product["image_url"]
            if file_path.exists():
                photo = FSInputFile(str(file_path))
                await message.answer_photo(photo, caption=current_product["name"])
            else:
                await message.answer(f"–§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ {current_product['name']} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        else:
            await message.answer_photo(current_product["image_url"], caption=current_product["name"])
    
    # –ó–∞–ø—Ä–æ—Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    elif any(word in user_message_lower for word in ["—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞", "–æ–ø–∏—Å–∞–Ω–∏–µ", "–ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", "–¥–µ—Ç–∞–ª–∏", "specs", "specifications"]):
        await message.answer(f"üìã –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ {current_product['name']}:\n\n{current_product['desc']}\n\nüí∞ –¶–µ–Ω–∞: {current_product['price']}‚ÇΩ")
    
    # –ó–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã
    elif any(word in user_message_lower for word in ["—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "price", "cost", "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç"]):
        await message.answer(f"üí∞ –¶–µ–Ω–∞ {current_product['name']}: {current_product['price']}‚ÇΩ")
    
    # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    elif any(word in user_message_lower for word in ["–∑–∞–∫–∞–∑", "–∫—É–ø–∏—Ç—å", "–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏", "–æ—Ñ–æ—Ä–º–∏—Ç—å", "order", "buy", "purchase"]):
        await message.answer(
            f"üõí –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–∞ {current_product['name']}\n\n"
            f"–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (800) 555-0123\n"
            f"üìß Email: order@technomarket.ru\n"
            f"üí¨ Telegram: @technomarket_support\n\n"
            f"–ò–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏ –º—ã –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç."
        )
        await state.set_state(OrderStates.waiting_for_contact)
    
    # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤
    elif any(word in user_message_lower for word in ["–Ω–∞–∑–∞–¥", "—Å–ø–∏—Å–æ–∫", "–¥—Ä—É–≥–∏–µ", "–µ—â–µ", "back", "list", "other", "more"]):
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.")
        await state.clear()
    
    # –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–æ–≤–∞—Ä–µ
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç–æ–≤–∞—Ä–µ
        context = f"""–¢—ã ‚Äî –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –º–∞–≥–∞–∑–∏–Ω–∞ "–¢–µ—Ö–Ω–æ–ú–∞—Ä–∫–µ—Ç". –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –æ —Ç–æ–≤–∞—Ä–µ:

–¢–æ–≤–∞—Ä: {current_product['name']}
–û–ø–∏—Å–∞–Ω–∏–µ: {current_product['desc']}
–¶–µ–Ω–∞: {current_product['price']}‚ÇΩ

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}

–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏, –≤–µ–∂–ª–∏–≤–æ —Å–æ–æ–±—â–∏, —á—Ç–æ —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."""
        
        reply = await get_gpt_response(user_message, context)
        await message.answer(reply)
    
    session.close() 