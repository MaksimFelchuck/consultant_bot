from aiogram import Router, F
from aiogram.types import Message, InputFile, FSInputFile
from aiogram.filters import Command
from context import context_manager
from openai_api import get_gpt_response, get_category_by_llm
from database import SessionLocal
from database.service import (
    get_or_create_user, save_message, get_user_history, get_random_products_by_category, get_random_products_for_category
)
from context import format_products_for_context
from database.models import Category, Product, User
import re
from pathlib import Path
from sqlalchemy import func
from sqlalchemy import or_
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.fsm.state import State, StatesGroup
import json
import logging

router = Router()

class OrderStates(StatesGroup):
    waiting_for_choice = State()
    waiting_for_contact = State()

BRAND_GROUPS = {
    "–∫–∏—Ç–∞–π—Å–∫–∏–µ": ["Xiaomi", "Realme", "Honor", "Huawei", "OnePlus", "Lenovo", "Meizu", "ZTE", "Vivo", "Oppo", "TCL", "Hisense"],
    "–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ": ["Apple", "Google", "Microsoft", "Dell", "HP", "Sennheiser", "JBL", "Razer", "Kingston", "Baseus"],
    "–∫–æ—Ä–µ–π—Å–∫–∏–µ": ["Samsung", "LG"],
    "—è–ø–æ–Ω—Å–∫–∏–µ": ["Sony", "Panasonic", "Fujifilm", "Canon", "Nikon", "AOC"],
    "–Ω–µ–º–µ—Ü–∫–∏–µ": ["Sennheiser"],
    "—Ç–∞–π–≤–∞–Ω—å—Å–∫–∏–µ": ["ASUS", "Acer", "MSI", "BenQ"],
    "—à–≤–µ–π—Ü–∞—Ä—Å–∫–∏–µ": ["Logitech"],
    "–≥–æ–ª–ª–∞–Ω–¥—Å–∫–∏–µ": ["Philips"],
    "–∫–∞–ª–∏—Ñ–æ—Ä–Ω–∏–π—Å–∫–∏–µ": ["Apple", "Google"],
}
SIZE_RANGES = {
    "—Ç–µ–ª–µ–≤–∏–∑–æ—Ä—ã": {
        "–º–∞–ª–µ–Ω—å–∫–∏–π": ["43"],
        "—Å—Ä–µ–¥–Ω–∏–π": ["50", "55"],
        "–±–æ–ª—å—à–æ–π": ["65", "75", "85"]
    },
    "–Ω–æ—É—Ç–±—É–∫–∏": {
        "–º–∞–ª–µ–Ω—å–∫–∏–π": ["13"],
        "—Å—Ä–µ–¥–Ω–∏–π": ["14", "15.6"],
        "–±–æ–ª—å—à–æ–π": ["16", "17"]
    },
    "–º–æ–Ω–∏—Ç–æ—Ä—ã": {
        "–º–∞–ª–µ–Ω—å–∫–∏–π": ["24"],
        "—Å—Ä–µ–¥–Ω–∏–π": ["27", "29"],
        "–±–æ–ª—å—à–æ–π": ["32", "34", "49"]
    }
}
IGNORE_WORDS = ["–Ω–µ –≤–∞–∂–Ω–æ", "–ª—é–±–æ–π", "–±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã", "–Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è", "any", "doesn't matter", "–ø–æ—Å–æ–≤–µ—Ç—É–π", "–ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π", "–≤—ã–±–µ—Ä–∏"]

def get_category_by_keywords(user_message: str) -> list[str]:
    mapping = {
        "—Ç–µ–ª–µ—Ñ–æ–Ω": "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã",
        "—Å–º–∞—Ä—Ç—Ñ–æ–Ω": "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã",
        "–º–æ–±–∏–ª—å–Ω–∏–∫": "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã",
        "–∞–π—Ñ–æ–Ω": "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã",
        "iphone": "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã",
        "–ø–ª–∞–Ω—à–µ—Ç": "–ü–ª–∞–Ω—à–µ—Ç—ã",
        "–Ω–æ—É—Ç–±—É–∫": "–ù–æ—É—Ç–±—É–∫–∏",
        "–º–∞–∫–±—É–∫": "–ù–æ—É—Ç–±—É–∫–∏",
        "—Ç–µ–ª–µ–≤–∏–∑–æ—Ä": "–¢–µ–ª–µ–≤–∏–∑–æ—Ä—ã",
        "–Ω–∞—É—à–Ω–∏–∫–∏": "–ù–∞—É—à–Ω–∏–∫–∏",
        "—á–∞—Å—ã": "–°–º–∞—Ä—Ç-—á–∞—Å—ã",
        "apple watch": "–°–º–∞—Ä—Ç-—á–∞—Å—ã",
        "–∫–∞–º–µ—Ä–∞": "–§–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç—ã",
        "—Ñ–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç": "–§–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç—ã",
        "–ø—Ä–∏—Å—Ç–∞–≤–∫–∞": "–ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏",
        "playstation": "–ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏",
        "xbox": "–ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏",
        "–º–æ–Ω–∏—Ç–æ—Ä": "–ú–æ–Ω–∏—Ç–æ—Ä—ã",
        "–∞–∫—Å–µ—Å—Å—É–∞—Ä": "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã",
        "–º—ã—à—å": "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã",
        "–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞": "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã",
        "powerbank": "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã",
    }
    text = user_message.lower()
    found = set()
    for key, cat in mapping.items():
        if key in text:
            found.add(cat)
    return list(found)

def to_plain_dict(obj):
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫ –ø—Ä–æ—Å—Ç—ã–º —Ç–∏–ø–∞–º
    if isinstance(obj, dict):
        return {str(k): to_plain_dict(v) for k, v in obj.items()}
    elif isinstance(obj, list):
        return [to_plain_dict(v) for v in obj]
    elif isinstance(obj, (str, int, float, bool)) or obj is None:
        return obj
    else:
        return str(obj)

@router.message(Command("start"))
async def cmd_start(message: Message):
    session = SessionLocal()
    categories = session.query(Category).all()
    session.close()
    cat_list = "\n".join([f"‚Ä¢ {cat.name}" for cat in categories])
    # –ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è –¢–µ—Ö–Ω–æ–ú–∞—Ä–∫–µ—Ç (–ø—Ä–∏–º–µ—Ä Unsplash)
    image_url = "images/hello_image.png"
    photo = FSInputFile(image_url)
    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–µ—Ö–Ω–æ–ú–∞—Ä–∫–µ—Ç! üõí\n\n"
        "–Ø ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ ü§ñ. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ—Ö–Ω–∏–∫–∏, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞!\n\n"
        "–í –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –µ—Å—Ç—å —Ç–∞–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
        f"{cat_list}\n\n"
        "–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –ü–∏—à–∏—Ç–µ –ø—Ä—è–º–æ —Å—é–¥–∞! üòä\n\n"
        "üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–§ | üí≥ –û–ø–ª–∞—Ç–∞ –æ–Ω–ª–∞–π–Ω/–Ω–∞–ª–∏—á–Ω—ã–º–∏ | üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç–∏—è 1 –≥–æ–¥\n"
        "\n–°–∞–π—Ç: https://technomarket.ru\n\n"
        "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –±–æ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π, —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞—Å—Ç–æ—è—â–∏–µ, –∑–∞–∫–∞–∑—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è."
    )
    await message.answer_photo(photo, caption=text)

@router.message(Command("setcontext"))
async def cmd_setcontext(message: Message):
    if message.text and len(message.text.split(maxsplit=1)) > 1:
        new_context = message.text.split(maxsplit=1)[1]
        context_manager.save_context(new_context)
        await message.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É —É—á–∏—Ç—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç –¢–µ—Ö–Ω–æ–ú–∞—Ä–∫–µ—Ç.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /setcontext –í—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–µ.")

@router.message(Command("resetcontext"))
async def cmd_resetcontext(message: Message):
    context_manager.reset_context()
    await message.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –¥–ª—è –¢–µ—Ö–Ω–æ–ú–∞—Ä–∫–µ—Ç. –Ø —Å–Ω–æ–≤–∞ –≥–æ—Ç–æ–≤ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∏ —É—Å–ª—É–≥–∞–º –∫–æ–º–ø–∞–Ω–∏–∏!")

@router.message(F.text)
async def handle_message(message: Message, state: FSMContext):
    user_message = message.text or ""
    session = SessionLocal()
    tg_user = message.from_user
    if tg_user is None:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.")
        return
    user = get_or_create_user(
        session,
        telegram_id=str(tg_user.id),
        username=tg_user.username,
        first_name=tg_user.first_name,
        last_name=tg_user.last_name
    )
    session.refresh(user)
    user_id = user.id if isinstance(user.id, int) else user.id.value
    save_message(session, user_id, "user", user_message)

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è LLM
    history_limit = 5
    history = get_user_history(session, user_id, limit=history_limit)
    history_text = "\n".join([
        f"{m.role}: {m.message}" for m in history
    ])
    context = f"{context_manager.get_context()}\n\n–ò—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è:\n{history_text}"
    reply = await get_gpt_response(user_message, context)
    save_message(session, user_id, "assistant", reply)

    # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM
    search_params = None
    for line in reply.splitlines():
        if line.strip().lower().startswith("–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:"):
            search_params = line.strip()[len("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:"):].strip()
            break
    if search_params:
        # –ü—Ä–∏–º–µ—Ä: –∫–∞—Ç–µ–≥–æ—Ä–∏—è=–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã, –±—Ä–µ–Ω–¥=Samsung, —Ü–µ–Ω–∞=50000, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏=AMOLED
        params = {}
        for part in search_params.split(","):
            if "=" in part:
                k, v = part.split("=", 1)
                params[k.strip().lower()] = v.strip().lower()
        # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ
        query = session.query(Product)
        category_obj = None
        # Fallback: –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî –∏—â–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ –≤ extra_data
        if ("–∫–∞—Ç–µ–≥–æ—Ä–∏—è" not in params or not params["–∫–∞—Ç–µ–≥–æ—Ä–∏—è"] or any(w in params["–∫–∞—Ç–µ–≥–æ—Ä–∏—è"] for w in IGNORE_WORDS)):
            # 1. –ü—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ last_category –≤ extra_data
            extra = user.extra_data if isinstance(user.extra_data, dict) else {}
            if not isinstance(extra, dict):
                extra = {}
            last_category = extra.get("last_category")
            if last_category:
                params["–∫–∞—Ç–µ–≥–æ—Ä–∏—è"] = last_category
                logging.warning(f"[–¢–µ—Ö–Ω–æ–ú–∞—Ä–∫–µ—Ç] LLM –Ω–µ —É–∫–∞–∑–∞–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º last_category –∏–∑ extra_data: {last_category}")
            else:
                # 2. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                cat_from_history = get_category_by_keywords(history_text)
                if cat_from_history:
                    params["–∫–∞—Ç–µ–≥–æ—Ä–∏—è"] = cat_from_history[0]
                    extra["last_category"] = cat_from_history[0]
                    logging.warning(f"[–¢–µ—Ö–Ω–æ–ú–∞—Ä–∫–µ—Ç] LLM –Ω–µ —É–∫–∞–∑–∞–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏: {cat_from_history[0]}")
                else:
                    logging.error("[–¢–µ—Ö–Ω–æ–ú–∞—Ä–∫–µ—Ç] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞, –Ω–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏!")
            user.extra_data = to_plain_dict(extra)  # type: ignore
            session.commit()
        if "–∫–∞—Ç–µ–≥–æ—Ä–∏—è" in params and not any(w in params["–∫–∞—Ç–µ–≥–æ—Ä–∏—è"] for w in IGNORE_WORDS):
            cat = session.query(Category).filter(Category.name.ilike(f"%{params['–∫–∞—Ç–µ–≥–æ—Ä–∏—è']}%"))
            category_obj = cat.first()
            if category_obj:
                query = query.filter(Product.category_id == category_obj.id)
                # –û–±–Ω–æ–≤–ª—è–µ–º last_category –≤ extra_data
                extra = user.extra_data if isinstance(user.extra_data, dict) else {}
                if not isinstance(extra, dict):
                    extra = {}
                extra["last_category"] = category_obj.name
                user.extra_data = to_plain_dict(extra)  # type: ignore
                session.commit()
        if "–±—Ä–µ–Ω–¥" in params and not any(w in params["–±—Ä–µ–Ω–¥"] for w in IGNORE_WORDS):
            brands = []
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—ã –±—Ä–µ–Ω–¥–æ–≤
            for group, group_brands in BRAND_GROUPS.items():
                if group in params["–±—Ä–µ–Ω–¥"]:
                    brands.extend(group_brands)
            # –ï—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω—ã –±—Ä–µ–Ω–¥—ã —á–µ—Ä–µ–∑ '–∏–ª–∏', ',', '/'
            for b in re.split(r"[,/]| –∏–ª–∏ | or ", params["–±—Ä–µ–Ω–¥"]):
                b = b.strip()
                if b and b not in brands:
                    brands.append(b.capitalize())
            logging.info(f"[–¢–µ—Ö–Ω–æ–ú–∞—Ä–∫–µ—Ç] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞: {params}, –±—Ä–µ–Ω–¥—ã: {brands}")
            if brands:
                brand_filters = [Product.name.ilike(f"%{b}%") for b in brands]
                query = query.filter(or_(*brand_filters))
        if "—Ü–µ–Ω–∞" in params and not any(w in params["—Ü–µ–Ω–∞"] for w in IGNORE_WORDS):
            try:
                price = int(re.sub(r"\D", "", params["—Ü–µ–Ω–∞"]))
                query = query.filter(Product.price <= price)
            except Exception:
                pass
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ (–º–∞–ª–µ–Ω—å–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π, –±–æ–ª—å—à–æ–π)
        if "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏" in params and not any(w in params["—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"] for w in IGNORE_WORDS):
            size_words = ["–º–∞–ª–µ–Ω—å–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "–±–æ–ª—å—à–æ–π"]
            for size_word in size_words:
                if size_word in params["—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"]:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞
                    cat_name = params.get("–∫–∞—Ç–µ–≥–æ—Ä–∏—è", "")
                    for key, ranges in SIZE_RANGES.items():
                        if key in cat_name.lower():
                            for sz in ranges[size_word]:
                                query = query.filter(Product.name.ilike(f"%{sz}%"))
                    break
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–æ–≤–∞ "–º–∞–ª–µ–Ω—å–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–±–æ–ª—å—à–æ–π", —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
                query = query.filter(Product.description.ilike(f"%{params['—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏']}%"))
        if "—Ü–≤–µ—Ç" in params and not any(w in params["—Ü–≤–µ—Ç"] for w in IGNORE_WORDS):
            # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ '–∏–ª–∏', ',', '/'
            colors = [c.strip() for c in re.split(r"[,/]| –∏–ª–∏ | or ", params["—Ü–≤–µ—Ç"]) if c.strip()]
            if colors:
                color_filters = [or_(Product.name.ilike(f"%{color}%"), Product.description.ilike(f"%{color}%")) for color in colors]
                query = query.filter(or_(*color_filters))
        products = query.order_by(func.random()).limit(3).all()
        # Fallback: –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if not products and category_obj:
            # –ù–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏—è ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ LLM —è–≤–Ω–æ –æ–±—ä—è—Å–Ω–∏–ª–∞, —á—Ç–æ —ç—Ç–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
            pass
        if products:
            text_lines = [reply.split("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:")[0].strip()]
            for idx, prod in enumerate(products, 1):
                text_lines.append(f"{idx}. {prod.name} ‚Äî {prod.price}‚ÇΩ\n{prod.description}")
            text_lines.append("\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ '—Ñ–æ—Ç–æ' –∏ –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")
            await message.answer("\n\n".join(text_lines))
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
            extra = user.extra_data if isinstance(user.extra_data, dict) else {}
            if not isinstance(extra, dict):
                extra = {}
            # –ì–æ—Ç–æ–≤–∏–º last_products —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–∏–ø–æ–≤
            last_products = []
            for p in products:
                price_val = getattr(p, 'price', 0)
                try:
                    price_val = int(price_val)
                except Exception:
                    price_val = 0
                last_products.append({
                    "name": str(getattr(p, 'name', '')),
                    "image_url": str(getattr(p, 'image_url', '')),
                    "desc": str(getattr(p, 'description', '')),
                    "price": price_val
                })
            extra["last_products"] = last_products
            user.extra_data = to_plain_dict(extra)  # type: ignore
            session.commit()
            await state.set_state(OrderStates.waiting_for_choice)
        else:
            await message.answer(reply.split("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:")[0].strip() + "\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
    else:
        await message.answer(reply)
    session.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
@router.message(F.text.regexp(r"(?i)—Ñ–æ—Ç–æ|–∫–∞—Ä—Ç–∏–Ω–∫–∞|photo|picture"))
async def handle_photo_request(message: Message, state: FSMContext):
    user_message = message.text or ""
    session = SessionLocal()
    tg_user = message.from_user
    if tg_user is None:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.")
        return
    user = get_or_create_user(
        session,
        telegram_id=str(tg_user.id),
        username=tg_user.username,
        first_name=tg_user.first_name,
        last_name=tg_user.last_name
    )
    session.refresh(user)
    extra = user.extra_data if isinstance(user.extra_data, dict) else {}
    if not isinstance(extra, dict):
        extra = {}
    last_products = extra.get("last_products", [])
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    choice = user_message.lower()
    chosen = None
    # –ü–æ –Ω–æ–º–µ—Ä—É
    for idx, prod in enumerate(last_products, 1):
        if str(idx) in choice:
            chosen = prod
            break
    # –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    if not chosen:
        for prod in last_products:
            if prod["name"].lower() in choice:
                chosen = prod
                break
    if chosen:
        if chosen["image_url"].startswith("images/"):
            file_path = Path(chosen["image_url"]).resolve()
            photo = FSInputFile(str(file_path))
            await message.answer_photo(photo, caption=chosen["name"])
        else:
            await message.answer_photo(chosen["image_url"], caption=chosen["name"])
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –¥–ª—è –∫–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–¥–∞—á–∏.")
    session.close() 